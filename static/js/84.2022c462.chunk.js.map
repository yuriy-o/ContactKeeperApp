{"version":3,"file":"static/js/84.2022c462.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","components/ContactForm/ContactForm.styled.js","components/ContactForm/ContactForm.jsx","components/additions/nanoidUA.js","components/ContactList/ContactList.styled.js","components/ContactList/ContactList.jsx","components/ContactsFilter/ContactsFilter.styled.js","components/ContactsFilter/ContactsFilter.jsx","pages/ContactsPage.styled.js","pages/ContactsPage.jsx"],"sourcesContent":["// getContacts\nexport const selectContacts = state => state.contacts.items;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n\nexport const getFilter = state => state.filter;\n","import styled from 'styled-components';\nimport { Form, Field, ErrorMessage } from 'formik';\nimport ReactInputMask from 'react-input-mask';\n\nexport const FormStyle = styled(Form)`\n  margin-bottom: 20px;\n`;\n\nexport const Label = styled.label`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n`;\nexport const Span = styled.span`\n  font-size: 20px;\n  font-weight: 500;\n\n  color: #3a7999;\n  margin-bottom: 10px;\n`;\n\nexport const Input = styled(Field)`\n  margin-bottom: 10px;\n  width: 100%;\n  height: 30px;\n  font-size: 20px;\n\n  ::placeholder {\n    font-size: 14px;\n    font-style: italic;\n  }\n`;\n\nexport const InputMaskWrapper = styled(ReactInputMask)`\n  margin-bottom: 10px;\n  width: 100%;\n  height: 30px;\n  font-size: 20px;\n\n  ::placeholder {\n    font-size: 14px;\n    font-style: italic;\n  }\n`;\n\nexport const Error = styled(ErrorMessage)`\n  color: red;\n  margin-bottom: 5px;\n`;\nexport const Hr = styled.div`\n  border: 0;\n  height: 2px;\n  background-color: #3a7999;\n  width: 600px;\n  text-align: center;\n  margin-top: 20px;\n  margin-bottom: 50px;\n  margin-left: -50px;\n`;\n","import { Field, Formik } from 'formik';\nimport { useSelector, useDispatch } from 'react-redux';\nimport * as Yup from 'yup';\n\nimport { addContact } from 'redux/contacts/operations';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { nanoidUA } from 'components/additions/nanoidUA';\nimport './ContactForm.css';\n\nimport {\n  FormStyle,\n  Span,\n  Input,\n  Error,\n  InputMaskWrapper,\n  Label,\n} from './ContactForm.styled';\n\nconst Schema = Yup.object().shape({\n  name: Yup.string()\n    .max(15)\n    .matches(\n      /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n      \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n    )\n    .required(),\n  number: Yup.string()\n    // .min(4)\n    // .max(4)\n    .matches(\n      /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,9}?\\)?[-.\\s]?\\d{1,9}[-.\\s]?\\d{1,9}[-.\\s]?\\d{1,9}[-.\\s]?\\d{1,9}[-.\\s]?\\d{1,9}[-.\\s]?\\d{1,9}[-.\\s]?\\d{1,9}/,\n      'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +'\n    )\n    .required(),\n});\n\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  const handleSubmit = (values, { resetForm }) => {\n    resetForm();\n\n    const { name, number } = values;\n\n    const contact = {\n      name,\n      number,\n    };\n\n    const dublicateContact = findDublicateContact(contact, contacts);\n\n    dublicateContact\n      ? alert(`${contact.name} is already in contacts`)\n      : dispatch(addContact({ ...values, id: nanoidUA() }));\n  };\n\n  const findDublicateContact = (contact, contactsList) => {\n    return contactsList.find(\n      item => item.name.toLowerCase() === contact.name.toLowerCase()\n    );\n  };\n\n  return (\n    <Formik\n      initialValues={{ name: '', number: '' }}\n      onSubmit={handleSubmit}\n      validationSchema={Schema}\n    >\n      <FormStyle autoComplete=\"off\">\n        <Label>\n          <Span>Name</Span>\n          <Input\n            type=\"text\"\n            name=\"name\"\n            placeholder=\"Enter your first and second name\"\n            required\n          />\n          <Error component=\"span\" name=\"name\" />\n        </Label>\n\n        <Label>\n          <Span>Number</Span>\n          <Field name=\"number\" required>\n            {({ field }) => (\n              <InputMaskWrapper\n                {...field}\n                mask=\"+38 (099) 999-9999\"\n                maskchar=\"_\"\n                placeholder=\"+38 (0__) ___-____\"\n              />\n            )}\n          </Field>\n\n          <Error component=\"span\" name=\"number\" />\n        </Label>\n\n        <button className=\"add-btn btn-7\" type=\"submit\">\n          <span>Add contact</span>\n        </button>\n        {/* <Hr></Hr> */}\n      </FormStyle>\n    </Formik>\n  );\n};\n","export const nanoidUA = () => {\n  const { customAlphabet } = require('nanoid');\n  const alphabet = '0123456789';\n  const nanoid = customAlphabet(alphabet, 3);\n  const idResult = 'UA-' + nanoid();\n  return idResult;\n};\n","import styled from 'styled-components';\n\nexport const Li = styled.li`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n\n  margin-bottom: 5px;\n`;\n\nexport const Button = styled.button`\n  display: block;\n  min-width: 80px;\n  height: 30px;\n\n  border: none;\n  background: #3a7999;\n  color: #f2f2f2;\n  padding: 7px 10px;\n  font-size: 16px;\n  border-radius: 5px;\n  cursor: pointer;\n  transition: all 500ms ease;\n\n  :hover {\n    background: rgba(0, 0, 0, 0);\n    color: #3a7999;\n    box-shadow: inset 0 0 0 3px #3a7999;\n    transform: scale(1.05);\n  }\n`;\nexport const GridWrapper = styled.div`\n  display: grid;\n  grid-template-columns: 1.05fr 1fr;\n  grid-template-rows: auto;\n  grid-column-gap: 15px;\n  width: 70%;\n`;\n\nexport const Name = styled.p`\n  justify-self: start;\n`;\n\nexport const Number = styled.p`\n  justify-self: end;\n`;\n","import { useSelector, useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operations';\nimport { selectContacts, getFilter } from 'redux/contacts/selectors';\n\nimport { GridWrapper, Li, Name, Number } from './ContactList.styled';\nimport './ContactList.css';\n\nexport const ContactList = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n  const filter = useSelector(getFilter);\n\n  const normalizedFilter = filter.toLowerCase();\n\n  const filteredContacts = contacts.filter(contact =>\n    contact.name.toLowerCase().includes(normalizedFilter)\n  );\n\n  const handleDeleteContact = contactId => {\n    dispatch(deleteContact(contactId));\n  };\n\n  return (\n    <ol>\n      {filteredContacts.map(contact => (\n        <Contact\n          key={contact.id}\n          contact={contact}\n          onDeleteContact={handleDeleteContact}\n        />\n      ))}\n    </ol>\n  );\n};\n\nconst Contact = ({ contact, onDeleteContact }) => {\n  const { id, name, number } = contact;\n\n  return (\n    <>\n      <Li>\n        <GridWrapper>\n          <Name>{name}:</Name>\n          <Number>{number}</Number>\n        </GridWrapper>\n\n        {/* old style button */}\n        {/* <Button onClick={() => onDeleteContact(id)} type=\"button\">\n        Delete\n      </Button> */}\n\n        <button\n          className=\"btn-delete btn-rotating\"\n          onClick={() => onDeleteContact(id)}\n          type=\"button\"\n        >\n          <span>Are you sure?</span>\n          <span>Delete</span>\n        </button>\n      </Li>\n    </>\n  );\n};\n","import styled from 'styled-components';\n\nexport const Label = styled.label`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n\n  margin-bottom: 20px;\n`;\n\nexport const Text = styled.p`\n  font-size: 20px;\n  font-weight: 500;\n\n  color: #3a7999;\n  margin-bottom: 10px;\n`;\nexport const Input = styled.input`\n  margin-bottom: 10px;\n  width: 100%;\n  height: 30px;\n  font-size: 20px;\n\n  ::placeholder {\n    font-size: 14px;\n    font-style: italic;\n  }\n`;\nexport const H2 = styled.h2`\n  color: #3a7999;\n  margin-bottom: 25px;\n  text-align: center;\n`;\n","import React, { useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setFilter } from 'redux/contacts/filterSlice';\nimport { getFilter } from 'redux/contacts/selectors';\nimport { Input, Label, Text } from './ContactsFilter.styled';\n// import { Hr } from 'components/ContactForm/ContactForm.styled';\n\nexport const ContactsFilter = React.memo(() => {\n  const dispatch = useDispatch();\n  const filter = useSelector(getFilter);\n\n  const onFilterChange = useCallback(\n    e => {\n      dispatch(setFilter(e.target.value));\n    },\n    [dispatch]\n  );\n\n  return (\n    <>\n      <Label>\n        <Text>Find contacts by name</Text>\n        <Input\n          type=\"text\"\n          name=\"filter\"\n          value={filter}\n          onChange={onFilterChange}\n          placeholder=\"Enter a name to search for\"\n          required\n        />\n      </Label>\n      {/* <Hr></Hr> */}\n    </>\n  );\n});\n","import styled from 'styled-components';\n\nexport const Container = styled.section`\n  border-radius: 10px;\n  box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);\n  margin: 20px auto;\n  padding: 20px 50px;\n  text-align: center;\n  max-width: 500px;\n`;\n\nexport const H1 = styled.h1`\n  color: #3a7999;\n  margin-bottom: 15px;\n`;\nexport const H2 = styled.h2`\n  color: #3a7999;\n  margin-bottom: 15px;\n`;\nexport const Warning = styled.p`\n  font-size: 20px;\n  color: orangered;\n`;\n","import { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { selectIsLoading, selectError } from 'redux/contacts/selectors';\n\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { ContactsFilter } from 'components/ContactsFilter/ContactsFilter';\nimport { Container, H1, H2 } from './ContactsPage.styled';\n\nconst ContactsPage = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <main>\n      <Container>\n        <H1>Phonebook</H1>\n        <ContactForm />\n        <H2>Contacts</H2>\n        <div>\n          <ContactsFilter />\n          {isLoading && !error && <b>Request in progress...</b>}\n          <ContactList />\n        </div>\n      </Container>\n    </main>\n  );\n};\n\nexport default ContactsPage;\n"],"names":["selectContacts","state","contacts","items","selectIsLoading","isLoading","selectError","error","getFilter","filter","FormStyle","styled","Form","Label","Span","Input","Field","InputMaskWrapper","ReactInputMask","Error","ErrorMessage","Schema","Yup","shape","name","max","matches","required","number","ContactForm","dispatch","useDispatch","useSelector","findDublicateContact","contact","contactsList","find","item","toLowerCase","initialValues","onSubmit","values","resetForm","alert","addContact","id","customAlphabet","require","nanoid","validationSchema","autoComplete","type","placeholder","component","field","mask","maskchar","className","Li","GridWrapper","Name","Number","ContactList","normalizedFilter","filteredContacts","includes","handleDeleteContact","contactId","deleteContact","map","Contact","onDeleteContact","onClick","Text","ContactsFilter","React","onFilterChange","useCallback","e","setFilter","target","value","onChange","Container","H1","H2","useEffect","fetchContacts"],"sourceRoot":""}